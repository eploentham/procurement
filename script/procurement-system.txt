# ===================================
# PROCUREMENT MANAGEMENT SYSTEM SETUP
# ===================================

# 1. สร้าง project directory
mkdir procurement-system
cd procurement-system

# 2. Initialize Node.js project
npm init -y

# 3. Install dependencies
npm install express mysql2 joi cors helmet express-rate-limit jsonwebtoken bcryptjs multer uuid moment excel4node nodemailer dotenv

# 4. Install development dependencies
npm install --save-dev nodemon jest supertest eslint prettier

# 5. Create project structure
mkdir -p {config,controllers,middleware,models,routes,services,utils,validators,uploads,logs,tests}
mkdir -p public/{css,js,images}
mkdir -p views/{layouts,partials}

# 6. Create main files
touch server.js
touch .env
touch .gitignore
touch README.md

# 7. Create config files
touch config/database.js
touch config/auth.js
touch config/upload.js

# 8. Create middleware files
touch middleware/auth.js
touch middleware/validate.js
touch middleware/upload.js
touch middleware/errorHandler.js
touch middleware/logger.js
touch middleware/rateLimiter.js

# 9. Create model files
touch models/UserModel.js
touch models/VendorModel.js
touch models/CategoryModel.js
touch models/ProductModel.js
touch models/PurchaseRequestModel.js
touch models/PurchaseOrderModel.js
touch models/QuotationModel.js
touch models/ContractModel.js
touch models/ReceivingModel.js
touch models/PaymentModel.js

# 10. Create controller files
touch controllers/AuthController.js
touch controllers/UserController.js
touch controllers/VendorController.js
touch controllers/CategoryController.js
touch controllers/ProductController.js
touch controllers/PurchaseRequestController.js
touch controllers/PurchaseOrderController.js
touch controllers/QuotationController.js
touch controllers/ContractController.js
touch controllers/ReceivingController.js
touch controllers/PaymentController.js
touch controllers/ReportController.js
touch controllers/DashboardController.js

# 11. Create route files
touch routes/authRoutes.js
touch routes/userRoutes.js
touch routes/vendorRoutes.js
touch routes/categoryRoutes.js
touch routes/productRoutes.js
touch routes/purchaseRequestRoutes.js
touch routes/purchaseOrderRoutes.js
touch routes/quotationRoutes.js
touch routes/contractRoutes.js
touch routes/receivingRoutes.js
touch routes/paymentRoutes.js
touch routes/reportRoutes.js
touch routes/dashboardRoutes.js

# 12. Create service files
touch services/EmailService.js
touch services/PDFService.js
touch services/ExcelService.js
touch services/NotificationService.js
touch services/ApprovalService.js
touch services/CalculationService.js

# 13. Create validator files
touch validators/userValidator.js
touch validators/vendorValidator.js
touch validators/productValidator.js
touch validators/purchaseRequestValidator.js
touch validators/purchaseOrderValidator.js
touch validators/quotationValidator.js

# 14. Create utility files
touch utils/helpers.js
touch utils/constants.js
touch utils/permissions.js
touch utils/dateHelper.js
touch utils/numberHelper.js

# 15. Create test files
touch tests/auth.test.js
touch tests/vendor.test.js
touch tests/purchaseRequest.test.js

# 16. Create database setup files
mkdir database
touch database/schema.sql
touch database/seeders.sql
touch database/migrations.sql

# ===================================
# PROJECT CONFIGURATION FILES
# ===================================

# Create package.json scripts
cat > package.json << 'EOF'
{
  "name": "procurement-system",
  "version": "1.0.0",
  "description": "Procurement Management System",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "test": "jest",
    "test:watch": "jest --watch",
    "lint": "eslint .",
    "lint:fix": "eslint . --fix",
    "format": "prettier --write .",
    "db:seed": "node database/seeders.js",
    "db:migrate": "node database/migrations.js"
  },
  "keywords": ["procurement", "purchase", "nodejs", "express", "mysql"],
  "author": "Your Name",
  "license": "MIT",
  "dependencies": {
    "express": "^4.18.2",
    "mysql2": "^3.6.0",
    "joi": "^17.9.2",
    "cors": "^2.8.5",
    "helmet": "^7.0.0",
    "express-rate-limit": "^6.8.1",
    "jsonwebtoken": "^9.0.1",
    "bcryptjs": "^2.4.3",
    "multer": "^1.4.5-lts.1",
    "uuid": "^9.0.0",
    "moment": "^2.29.4",
    "excel4node": "^1.8.2",
    "nodemailer": "^6.9.4",
    "dotenv": "^16.3.1"
  },
  "devDependencies": {
    "nodemon": "^3.0.1",
    "jest": "^29.6.1",
    "supertest": "^6.3.3",
    "eslint": "^8.47.0",
    "prettier": "^3.0.1"
  }
}
EOF

# Create .env template
cat > .env << 'EOF'
# Server Configuration
NODE_ENV=development
PORT=3000
HOST=localhost

# Database Configuration
DB_HOST=localhost
DB_PORT=3306
DB_USER=root
DB_PASSWORD=your_password
DB_NAME=procurement_system

# JWT Configuration
JWT_SECRET=your_super_secret_jwt_key_here
JWT_EXPIRES_IN=24h
JWT_REFRESH_SECRET=your_refresh_secret_here
JWT_REFRESH_EXPIRES_IN=7d

# Email Configuration
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_USER=your_email@gmail.com
EMAIL_PASS=your_app_password
EMAIL_FROM=noreply@yourcompany.com

# File Upload Configuration
UPLOAD_PATH=./uploads
MAX_FILE_SIZE=10485760
ALLOWED_FILE_TYPES=pdf,doc,docx,xls,xlsx,jpg,jpeg,png

# Pagination
DEFAULT_PAGE_SIZE=20
MAX_PAGE_SIZE=100

# Rate Limiting
RATE_LIMIT_WINDOW=15
RATE_LIMIT_MAX=100

# System Settings
COMPANY_NAME=Your Company Name
COMPANY_ADDRESS=Your Company Address
COMPANY_TAX_ID=1234567890123
COMPANY_PHONE=02-123-4567
COMPANY_EMAIL=info@yourcompany.com
EOF

# Create .gitignore
cat > .gitignore << 'EOF'
# Dependencies
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Logs
logs/
*.log

# Runtime data
pids/
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/
*.lcov

# nyc test coverage
.nyc_output

# Uploads
uploads/*
!uploads/.gitkeep

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# IDE
.vscode/
.idea/
*.swp
*.swo

# Build outputs
dist/
build/

# Temporary files
tmp/
temp/
EOF

# Create README.md
cat > README.md << 'EOF'
# Procurement Management System

ระบบจัดซื้อจัดจ้างครบวงจร พัฒนาด้วย Node.js, Express และ MySQL

## Features

### Core Modules
- 🏢 **Vendor Management** - จัดการข้อมูลผู้ขาย
- 📦 **Product Catalog** - จัดการข้อมูลสินค้า/บริการ
- 📝 **Purchase Request** - การขอซื้อ/ขอจ้าง
- 💰 **Quotation Management** - จัดการใบเสนอราคา
- 📋 **Purchase Order** - ใบสั่งซื้อ/สั่งจ้าง
- 📄 **Contract Management** - จัดการสัญญา
- 📦 **Receiving** - การรับสินค้า/งาน
- 💸 **Payment Processing** - การชำระเงิน
- 📊 **Reports & Analytics** - รายงานและวิเคราะห์

### Key Features
- ✅ Multi-level Approval Workflow
- 🔄 Real-time Status Tracking
- 📧 Email Notifications
- 📱 Mobile Responsive
- 🔐 Role-based Access Control
- 📈 Dashboard & KPIs
- 🗂️ Document Management
- 🔍 Advanced Search & Filters
- 📊 Excel Import/Export
- 🏷️ Budget Management

## Tech Stack

- **Backend**: Node.js, Express.js
- **Database**: MySQL
- **Authentication**: JWT
- **File Upload**: Multer
- **Email**: Nodemailer
- **Excel**: excel4node
- **PDF**: PDFKit
- **Validation**: Joi
- **Testing**: Jest

## Installation

1. Clone the repository
```bash
git clone <repository-url>
cd procurement-system
```

2. Install dependencies
```bash
npm install
```

3. Setup environment variables
```bash
cp .env.example .env
# Edit .env with your configuration
```

4. Setup database
```bash
mysql -u root -p < database/schema.sql
npm run db:seed
```

5. Start the server
```bash
npm run dev
```

## API Endpoints

### Authentication
- `POST /api/auth/login` - Login
- `POST /api/auth/register` - Register
- `POST /api/auth/refresh` - Refresh token
- `POST /api/auth/logout` - Logout

### Vendors
- `GET /api/vendors` - Get all vendors
- `POST /api/vendors` - Create vendor
- `GET /api/vendors/:id` - Get vendor by ID
- `PUT /api/vendors/:id` - Update vendor
- `DELETE /api/vendors/:id` - Delete vendor

### Purchase Requests
- `GET /api/purchase-requests` - Get all requests
- `POST /api/purchase-requests` - Create request
- `PUT /api/purchase-requests/:id` - Update request
- `POST /api/purchase-requests/:id/approve` - Approve request
- `POST /api/purchase-requests/:id/reject` - Reject request

### Purchase Orders
- `GET /api/purchase-orders` - Get all orders
- `POST /api/purchase-orders` - Create order
- `GET /api/purchase-orders/:id/pdf` - Generate PDF

## Project Structure

```
procurement-system/
├── config/              # Configuration files
├── controllers/         # Route controllers
├── middleware/          # Custom middleware
├── models/             # Database models
├── routes/             # API routes
├── services/           # Business logic services
├── utils/              # Utility functions
├── validators/         # Input validation
├── uploads/            # File uploads
├── tests/              # Test files
├── database/           # Database files
└── public/             # Static files
```

## Environment Variables

See `.env.example` for all required environment variables.

## Testing

```bash
# Run all tests
npm test

# Run tests in watch mode
npm run test:watch

# Run specific test
npm test -- auth.test.js
```

## License

MIT License
EOF

# Create uploads directory with .gitkeep
mkdir -p uploads
touch uploads/.gitkeep

# Create logs directory with .gitkeep
mkdir -p logs
touch logs/.gitkeep

echo "✅ Procurement System project structure created successfully!"
echo ""
echo "📁 Project: procurement-system"
echo "🗂️  Structure: Complete with all directories and files"
echo "📦 Dependencies: Ready to install with 'npm install'"
echo ""
echo "Next steps:"
echo "1. cd procurement-system"
echo "2. npm install"
echo "3. Configure .env file"
echo "4. Setup MySQL database"
echo "5. npm run dev"
echo ""
echo "🚀 Happy coding!"